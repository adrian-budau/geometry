// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var drawCircle, redraw, splitPolygon, updateIfNecessary,
      _this = this;
    redraw = function(polygon, element, color, clear) {
      var N, control, ctx, currentControl, first, i, j, newControl, newPoint, point, points, r, ratio, second, _i, _j, _k, _l, _len, _ref, _ref1;
      if (polygon == null) {
        polygon = window.polygon;
      }
      if (element == null) {
        element = $("#draw")[0];
      }
      if (color == null) {
        color = "black";
      }
      if (clear == null) {
        clear = true;
      }
      if (polygon.length <= 1) {
        return;
      }
      points = [];
      control = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = polygon.length; _i < _len; _i++) {
          point = polygon[_i];
          _results.push(point.position());
        }
        return _results;
      })();
      control = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = control.length; _i < _len; _i++) {
          point = control[_i];
          _results.push({
            top: point.top + 11,
            left: point.left + 11
          });
        }
        return _results;
      })();
      for (r = _i = 0; _i <= 1000; r = ++_i) {
        currentControl = control;
        N = control.length;
        ratio = 1.0 / 1000.0 * r;
        for (i = _j = 2; 2 <= N ? _j <= N : _j >= N; i = 2 <= N ? ++_j : --_j) {
          newControl = [];
          for (j = _k = 2, _ref = currentControl.length; 2 <= _ref ? _k <= _ref : _k >= _ref; j = 2 <= _ref ? ++_k : --_k) {
            first = currentControl[j - 2];
            second = currentControl[j - 1];
            newPoint = {
              top: first.top * (1 - ratio) + second.top * ratio,
              left: first.left * (1 - ratio) + second.left * ratio
            };
            newControl.push(newPoint);
          }
          currentControl = newControl;
        }
        points.push(currentControl[0]);
      }
      ctx = element.getContext("2d");
      if (clear) {
        ctx.clear();
      }
      ctx.beginPath();
      ctx.strokeStyle = color;
      ctx.moveTo(points[0].left, points[0].top);
      _ref1 = points.slice(1);
      for (_l = 0, _len = _ref1.length; _l < _len; _l++) {
        point = _ref1[_l];
        ctx.lineTo(point.left, point.top);
      }
      ctx.stroke();
      if (polygon === window.polygon) {
        return window.requestAnimationFrame(function() {
          return redraw();
        });
      }
    };
    $(document).on('touchstart', '.circle-start', function(event) {
      var orig, touch;
      orig = event.originalEvent;
      touch = orig.touches[0];
      $(this).appendTo(document.body);
      return $(this).css({
        position: 'absolute',
        top: touch.pageY + "px",
        left: touch.pageX + "px"
      });
    });
    $(document).on('touchmove', '.circle-start', function(event) {
      var orig, touch;
      orig = event.originalEvent;
      touch = orig.touches[0];
      $(this).css({
        top: touch.pageY + "px",
        left: touch.pageX + "px"
      });
      return orig.preventDefault();
    });
    $(document).on('touchend', '.circle-start', function(event) {
      var left, newElement, top, _ref, _ref1;
      _ref = $(this).css(['top', 'left']), top = _ref.top, left = _ref.left;
      _ref1 = [parseInt(top, 10), parseInt(left, 10)], top = _ref1[0], left = _ref1[1];
      if (top + 22 < $('.main').height() && $("#draw").is(":visible")) {
        newElement = $('<div class="circle-end circle"></div>').css({
          position: 'absolute',
          top: top,
          left: left
        });
        $('.main').append(newElement);
        window.polygon.push(newElement);
        redraw();
      }
      $(this).css('position', 'static');
      return $(this).appendTo('.source');
    });
    $(document).on('touchmove', '.circle-end', function(event) {
      var orig, top, touch;
      orig = event.originalEvent;
      touch = orig.touches[0];
      top = touch.pageY < 395 ? touch.pageY : 394;
      $(this).css({
        top: top + "px",
        left: touch.pageX + "px"
      });
      return orig.preventDefault();
    });
    $(document).on('touchend', '.circle-end', function(event) {
      return redraw();
    });
    window.polygon = [];
    window.requestAnimationFrame(redraw);
    drawCircle = function(className, coords) {
      var left, newCircle, top;
      top = coords.top, left = coords.left;
      top -= 11;
      left -= 11;
      newCircle = $('<div class="circle"></div>');
      newCircle.addClass(className);
      newCircle.css({
        top: top + "px",
        left: left + "px",
        position: "absolute"
      });
      return newCircle.appendTo($(".main"));
    };
    splitPolygon = function(alpha) {
      var N, P, control, currentControl, first, i, j, left, newControl, newPoint, point, ratio, right, second, _i, _j, _k, _ref;
      if (window.polygon <= 1) {
        return [window.polygon, window.polygon];
      }
      control = (function() {
        var _i, _len, _ref, _results;
        _ref = window.polygon;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          _results.push(point.position());
        }
        return _results;
      })();
      control = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = control.length; _i < _len; _i++) {
          point = control[_i];
          _results.push({
            top: point.top + 11,
            left: point.left + 11
          });
        }
        return _results;
      })();
      P = [];
      P.push(control);
      currentControl = P[P.length - 1];
      N = control.length - 1;
      ratio = alpha;
      for (i = _i = 1; 1 <= N ? _i <= N : _i >= N; i = 1 <= N ? ++_i : --_i) {
        newControl = [];
        for (j = _j = 2, _ref = currentControl.length; 2 <= _ref ? _j <= _ref : _j >= _ref; j = 2 <= _ref ? ++_j : --_j) {
          first = currentControl[j - 2];
          second = currentControl[j - 1];
          newPoint = {
            top: first.top * (1 - ratio) + second.top * ratio,
            left: first.left * (1 - ratio) + second.left * ratio
          };
          newControl.push(newPoint);
        }
        currentControl = newControl;
        P.push(currentControl);
      }
      left = [];
      right = [];
      for (i = _k = 0; 0 <= N ? _k <= N : _k >= N; i = 0 <= N ? ++_k : --_k) {
        left.push(drawCircle((i === N ? "first second" : "first"), P[i][0]));
        right.push(drawCircle((i === 0 ? "first second" : "second"), P[N - i][i]));
      }
      return [left, right];
    };
    $(".wrapper").on("dblclick", function() {
      var first, second, _ref;
      $(".first").remove();
      $(".second").remove();
      if ($("#draw").is(":visible")) {
        $("#draw").hide();
        $("#view").show();
        _ref = splitPolygon($(".slider-number").val()), first = _ref[0], second = _ref[1];
        $(".circle-end").hide();
        redraw(first, $("#view")[0], "green");
        return redraw(second, $("#view")[0], "purple", false);
      } else {
        $("#draw").show();
        $("#view").hide();
        return $(".circle-end").show();
      }
    });
    updateIfNecessary = function() {
      var first, second, _ref;
      if ($("#draw").is(":visible")) {
        return;
      }
      $(".first").remove();
      $(".second").remove();
      $(".circle-end").show();
      _ref = splitPolygon($(".slider-number").val()), first = _ref[0], second = _ref[1];
      $(".circle-end").hide();
      redraw(first, $("#view")[0], "green");
      return redraw(second, $("#view")[0], "purple", false);
    };
    $(".slider").on("change", function() {
      $(".slider-number").val($(this).val() / 100.0);
      return updateIfNecessary();
    });
    return $(".slider-number").on("change", function() {
      var value;
      value = $(this).val();
      value = parseFloat(value, 10);
      if (value < 0) {
        value = 0;
      }
      if (value > 1) {
        value = 1;
      }
      $(this).val(value);
      $(".slider").val(value * 100);
      return updateIfNecessary();
    });
  });

}).call(this);
